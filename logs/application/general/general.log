{"eventTime": "2023-02-03 09:46:30,012", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 09:46:30,168", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 09:46:30,604", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 11393 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 09:46:30,606", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 09:46:31,055", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 09:46:31,196", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 135 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 09:46:32,139", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 09:46:32,147", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 09:46:32,147", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 09:46:32,147", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 09:46:32,392", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 09:46:32,452", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.027s)"}
{"eventTime": "2023-02-03 09:46:32,504", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 09:46:32,505", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 09:46:32,619", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.267 seconds (process running for 4.005)"}
{"eventTime": "2023-02-03 09:51:49,916", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 09:51:50,070", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 09:51:50,691", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 12119 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 09:51:50,692", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 09:51:51,145", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 09:51:51,293", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 142 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 09:51:52,444", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 09:51:52,452", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 09:51:52,453", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 09:51:52,453", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 09:51:52,659", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 09:51:52,696", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.021s)"}
{"eventTime": "2023-02-03 09:51:52,760", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 09:51:52,762", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 09:51:52,886", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.566 seconds (process running for 4.274)"}
{"eventTime": "2023-02-03 09:52:48,264", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 09:52:48,421", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 09:52:48,889", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 12280 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 09:52:48,890", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 09:52:49,327", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 09:52:49,488", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 154 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 09:52:50,563", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 09:52:50,570", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 09:52:50,570", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 09:52:50,570", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 09:52:50,801", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 09:52:50,843", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.022s)"}
{"eventTime": "2023-02-03 09:52:50,881", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 09:52:50,882", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 09:52:50,983", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.408 seconds (process running for 4.075)"}
{"eventTime": "2023-02-03 10:16:07,351", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:16:07,507", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:16:07,923", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 13067 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:16:07,925", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:16:08,346", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:16:08,468", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 117 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:16:09,416", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:16:09,424", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:16:09,425", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:16:09,425", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:16:09,626", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:16:09,665", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.020s)"}
{"eventTime": "2023-02-03 10:16:09,705", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:16:09,706", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:16:09,810", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.155 seconds (process running for 3.612)"}
{"eventTime": "2023-02-03 10:16:21,354", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:16:21,504", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:16:21,961", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 13173 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:16:21,963", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:16:22,356", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:16:22,488", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 126 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:16:23,475", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:16:23,484", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:16:23,485", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:16:23,485", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:16:23,697", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:16:23,738", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.023s)"}
{"eventTime": "2023-02-03 10:16:23,779", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:16:23,780", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:16:23,883", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.215 seconds (process running for 3.837)"}
{"eventTime": "2023-02-03 10:16:47,932", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:16:48,081", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:16:48,543", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 13582 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:16:48,544", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:16:48,930", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:16:49,068", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 133 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:16:49,994", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:16:50,002", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:16:50,002", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:16:50,003", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:16:50,235", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:16:50,279", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.027s)"}
{"eventTime": "2023-02-03 10:16:50,328", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:16:50,329", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:16:50,426", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.156 seconds (process running for 3.72)"}
{"eventTime": "2023-02-03 10:23:17,684", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:23:17,800", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:23:18,206", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 14548 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:23:18,207", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:23:18,605", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:23:18,735", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 125 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:23:19,659", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:23:19,667", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:23:19,668", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:23:19,668", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:23:19,867", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:23:19,905", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.020s)"}
{"eventTime": "2023-02-03 10:23:19,966", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:23:19,968", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:23:20,070", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.113 seconds (process running for 3.626)"}
{"eventTime": "2023-02-03 10:30:19,203", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:30:19,351", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:30:19,809", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 15634 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:30:19,810", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:30:20,237", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:30:20,363", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 121 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:30:21,324", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:30:21,334", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:30:21,335", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:30:21,335", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:30:21,539", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:30:21,580", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.021s)"}
{"eventTime": "2023-02-03 10:30:21,626", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:30:21,627", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:30:21,730", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.206 seconds (process running for 3.71)"}
{"eventTime": "2023-02-03 10:30:22,979", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailure$6:104", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > amount of money is less than 100"}
org.springframework.dao.DataIntegrityViolationException: executeMany; SQL [INSERT INTO money_deposit_event (account_number, amount) VALUES ($1, $2)]; new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at org.springframework.r2dbc.connection.ConnectionFactoryUtils.convertR2dbcException(ConnectionFactoryUtils.java:237)
	at org.springframework.r2dbc.core.DefaultDatabaseClient.lambda$inConnectionMany$8(DefaultDatabaseClient.java:150)
	at reactor.core.publisher.Flux.lambda$onErrorMap$28(Flux.java:7123)
	at reactor.core.publisher.Flux.lambda$onErrorResume$29(Flux.java:7176)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)
	at reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onError(FluxUsingWhen.java:364)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onError(FluxHandle.java:212)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onError(MonoFlatMapMany.java:255)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:200)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onNext(FluxDiscardOnCancel.java:91)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:113)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:814)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:739)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:161)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.emit(ReactorNettyClient.java:687)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:939)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:333)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:454)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.r2dbc.postgresql.ExceptionFactory$PostgresqlDataIntegrityViolationException: new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:102)
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:65)
	at io.r2dbc.postgresql.ExceptionFactory.handleErrorResponse(ExceptionFactory.java:132)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:178)
	... 43 common frames omitted
{"eventTime": "2023-02-03 10:33:16,550", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:33:16,695", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:33:17,129", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 15796 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:33:17,131", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:33:17,718", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:33:17,889", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 164 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:33:18,998", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:33:19,008", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:33:19,009", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:33:19,009", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:33:19,270", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:33:19,339", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.040s)"}
{"eventTime": "2023-02-03 10:33:19,388", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:33:19,389", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:33:19,504", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.661 seconds (process running for 4.182)"}
{"eventTime": "2023-02-03 10:33:20,874", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailureWhenThrowCustomException$3:80", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > remote service calling went with an custom exception"}
home.example.r2dbctransaction.exception.MyCustomException: null
	at home.example.r2dbctransaction.service.BankService.callRemoteService(BankService.java:87)
	at home.example.r2dbctransaction.service.BankService.lambda$depositWithRemoteServiceCall$3(BankService.java:65)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:159)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2071)
	at reactor.core.publisher.MonoTakeLastOne$TakeLastOneSubscriber.onComplete(MonoTakeLastOne.java:162)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:392)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:894)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:997)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onComplete(MonoFlatMapMany.java:260)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:238)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onComplete(FluxFilterFuseable.java:391)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onComplete(FluxDiscardOnCancel.java:104)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:128)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.FluxCreate$BaseSink.complete(FluxCreate.java:460)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:805)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.complete(FluxCreate.java:753)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drainLoop(FluxCreate.java:247)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drain(FluxCreate.java:213)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.complete(FluxCreate.java:204)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.complete(ReactorNettyClient.java:671)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:937)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
{"eventTime": "2023-02-03 10:41:17,103", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:41:17,283", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:41:17,751", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 17187 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:41:17,753", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:41:18,167", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:41:18,316", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 145 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:41:19,380", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:41:19,388", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:41:19,388", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:41:19,389", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:41:19,637", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:41:19,686", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.027s)"}
{"eventTime": "2023-02-03 10:41:19,734", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:41:19,735", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:41:19,848", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.394 seconds (process running for 3.958)"}
{"eventTime": "2023-02-03 10:41:21,066", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailure$6:107", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > amount of money is less than 100"}
org.springframework.dao.DataIntegrityViolationException: executeMany; SQL [INSERT INTO money_deposit_event (account_number, amount) VALUES ($1, $2)]; new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at org.springframework.r2dbc.connection.ConnectionFactoryUtils.convertR2dbcException(ConnectionFactoryUtils.java:237)
	at org.springframework.r2dbc.core.DefaultDatabaseClient.lambda$inConnectionMany$8(DefaultDatabaseClient.java:150)
	at reactor.core.publisher.Flux.lambda$onErrorMap$28(Flux.java:7123)
	at reactor.core.publisher.Flux.lambda$onErrorResume$29(Flux.java:7176)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)
	at reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onError(FluxUsingWhen.java:364)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onError(FluxHandle.java:212)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onError(MonoFlatMapMany.java:255)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:200)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onNext(FluxDiscardOnCancel.java:91)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:113)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:814)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:739)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:161)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.emit(ReactorNettyClient.java:687)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:939)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.r2dbc.postgresql.ExceptionFactory$PostgresqlDataIntegrityViolationException: new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:102)
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:65)
	at io.r2dbc.postgresql.ExceptionFactory.handleErrorResponse(ExceptionFactory.java:132)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:178)
	... 41 common frames omitted
{"eventTime": "2023-02-03 10:41:21,132", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailureWhenThrowCustomException$3:80", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > remote service calling went with an custom exception"}
home.example.r2dbctransaction.exception.MyCustomException: null
	at home.example.r2dbctransaction.service.BankService.callRemoteService(BankService.java:84)
	at home.example.r2dbctransaction.service.BankService.lambda$depositWithRemoteServiceCall$3(BankService.java:65)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:159)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2071)
	at reactor.core.publisher.MonoTakeLastOne$TakeLastOneSubscriber.onComplete(MonoTakeLastOne.java:162)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:392)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:894)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:997)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onComplete(MonoFlatMapMany.java:260)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:238)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onComplete(FluxFilterFuseable.java:391)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onComplete(FluxDiscardOnCancel.java:104)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:128)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.FluxCreate$BaseSink.complete(FluxCreate.java:460)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:805)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.complete(FluxCreate.java:753)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drainLoop(FluxCreate.java:247)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drain(FluxCreate.java:213)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.complete(FluxCreate.java:204)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.complete(ReactorNettyClient.java:671)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:937)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
{"eventTime": "2023-02-03 10:46:32,533", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:46:32,690", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:46:33,090", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 18213 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:46:33,091", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:46:33,495", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:46:33,622", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 121 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:46:34,685", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:46:34,692", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:46:34,693", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:46:34,693", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:46:34,903", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:46:34,943", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.022s)"}
{"eventTime": "2023-02-03 10:46:34,986", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:46:34,987", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:46:35,100", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.256 seconds (process running for 3.768)"}
{"eventTime": "2023-02-03 10:48:16,524", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:48:16,732", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:48:17,198", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 18373 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:48:17,199", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:48:17,711", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:48:17,848", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 132 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:48:18,784", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:48:18,791", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:48:18,792", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:48:18,792", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:48:19,005", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:48:19,045", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.021s)"}
{"eventTime": "2023-02-03 10:48:19,084", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:48:19,085", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:48:19,209", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.262 seconds (process running for 3.92)"}
{"eventTime": "2023-02-03 10:48:20,443", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$depositWithDeclarativeTransactionFailure$10:138", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > amount of money is less than 100"}
org.springframework.dao.DataIntegrityViolationException: executeMany; SQL [INSERT INTO money_deposit_event (account_number, amount) VALUES ($1, $2)]; new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at org.springframework.r2dbc.connection.ConnectionFactoryUtils.convertR2dbcException(ConnectionFactoryUtils.java:237)
	at org.springframework.r2dbc.core.DefaultDatabaseClient.lambda$inConnectionMany$8(DefaultDatabaseClient.java:150)
	at reactor.core.publisher.Flux.lambda$onErrorMap$28(Flux.java:7123)
	at reactor.core.publisher.Flux.lambda$onErrorResume$29(Flux.java:7176)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)
	at reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onError(FluxUsingWhen.java:364)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onError(FluxHandle.java:212)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onError(MonoFlatMapMany.java:255)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:200)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onNext(FluxDiscardOnCancel.java:91)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:113)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:814)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:739)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:161)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.emit(ReactorNettyClient.java:687)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:939)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:333)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:454)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.r2dbc.postgresql.ExceptionFactory$PostgresqlDataIntegrityViolationException: new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:102)
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:65)
	at io.r2dbc.postgresql.ExceptionFactory.handleErrorResponse(ExceptionFactory.java:132)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:178)
	... 43 common frames omitted
{"eventTime": "2023-02-03 10:51:04,053", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:51:04,194", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:51:04,632", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 18556 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:51:04,633", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:51:05,064", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:51:05,194", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 125 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:51:06,175", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:51:06,181", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:51:06,182", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:51:06,182", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:51:06,409", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:51:06,456", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.028s)"}
{"eventTime": "2023-02-03 10:51:06,497", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:51:06,499", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:51:06,608", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.24 seconds (process running for 3.715)"}
{"eventTime": "2023-02-03 10:51:07,719", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$depositWithDeclarativeTransactionFailureWhenThrowCustomException$12:158", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > remote service calling went with an custom exception"}
home.example.r2dbctransaction.exception.MyCustomException: null
	at home.example.r2dbctransaction.service.BankService.callRemoteService(BankService.java:111)
	at home.example.r2dbctransaction.service.BankService.lambda$depositWithDeclarativeTransactionWithCallingRemoteService$7(BankService.java:92)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:159)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2071)
	at reactor.core.publisher.MonoTakeLastOne$TakeLastOneSubscriber.onComplete(MonoTakeLastOne.java:162)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:392)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:894)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:997)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onComplete(MonoFlatMapMany.java:260)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:238)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onComplete(FluxFilterFuseable.java:391)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onComplete(FluxDiscardOnCancel.java:104)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:128)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.FluxCreate$BaseSink.complete(FluxCreate.java:460)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:805)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.complete(FluxCreate.java:753)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drainLoop(FluxCreate.java:247)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drain(FluxCreate.java:213)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.complete(FluxCreate.java:204)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.complete(ReactorNettyClient.java:671)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:937)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
{"eventTime": "2023-02-03 10:55:02,890", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:55:03,020", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:55:03,434", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 18751 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:55:03,436", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:55:03,828", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:55:03,965", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 131 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:55:04,886", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:55:04,896", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:55:04,896", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:55:04,896", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:55:05,107", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:55:05,149", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.022s)"}
{"eventTime": "2023-02-03 10:55:05,218", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:55:05,220", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:55:05,337", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.168 seconds (process running for 3.624)"}
{"eventTime": "2023-02-03 10:55:06,566", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailure$6:111", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > amount of money is less than 100"}
org.springframework.dao.DataIntegrityViolationException: executeMany; SQL [INSERT INTO money_deposit_event (account_number, amount) VALUES ($1, $2)]; new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at org.springframework.r2dbc.connection.ConnectionFactoryUtils.convertR2dbcException(ConnectionFactoryUtils.java:237)
	at org.springframework.r2dbc.core.DefaultDatabaseClient.lambda$inConnectionMany$8(DefaultDatabaseClient.java:150)
	at reactor.core.publisher.Flux.lambda$onErrorMap$28(Flux.java:7123)
	at reactor.core.publisher.Flux.lambda$onErrorResume$29(Flux.java:7176)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)
	at reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onError(FluxUsingWhen.java:364)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onError(FluxHandle.java:212)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onError(MonoFlatMapMany.java:255)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:200)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onNext(FluxDiscardOnCancel.java:91)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:113)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:814)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:739)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:161)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.emit(ReactorNettyClient.java:687)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:939)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.r2dbc.postgresql.ExceptionFactory$PostgresqlDataIntegrityViolationException: new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:102)
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:65)
	at io.r2dbc.postgresql.ExceptionFactory.handleErrorResponse(ExceptionFactory.java:132)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:178)
	... 41 common frames omitted
{"eventTime": "2023-02-03 10:55:06,643", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$depositWithDeclarativeTransactionFailureWhenThrowCustomException$12:182", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > remote service calling went with an custom exception"}
home.example.r2dbctransaction.exception.MyCustomException: null
	at home.example.r2dbctransaction.service.BankService.callRemoteService(BankService.java:111)
	at home.example.r2dbctransaction.service.BankService.lambda$depositWithDeclarativeTransactionWithCallingRemoteService$7(BankService.java:92)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:159)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2071)
	at reactor.core.publisher.MonoTakeLastOne$TakeLastOneSubscriber.onComplete(MonoTakeLastOne.java:162)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:392)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:894)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:997)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onComplete(MonoFlatMapMany.java:260)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:238)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onComplete(FluxFilterFuseable.java:391)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onComplete(FluxDiscardOnCancel.java:104)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:128)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.FluxCreate$BaseSink.complete(FluxCreate.java:460)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:805)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.complete(FluxCreate.java:753)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drainLoop(FluxCreate.java:247)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drain(FluxCreate.java:213)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.complete(FluxCreate.java:204)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.complete(ReactorNettyClient.java:671)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:937)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
{"eventTime": "2023-02-03 10:55:06,695", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailureWhenThrowCustomException$3:81", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > remote service calling went with an custom exception"}
home.example.r2dbctransaction.exception.MyCustomException: null
	at home.example.r2dbctransaction.service.BankService.callRemoteService(BankService.java:111)
	at home.example.r2dbctransaction.service.BankService.lambda$depositWithRemoteServiceCall$3(BankService.java:67)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:159)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2071)
	at reactor.core.publisher.MonoTakeLastOne$TakeLastOneSubscriber.onComplete(MonoTakeLastOne.java:162)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:392)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:894)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:997)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onComplete(MonoFlatMapMany.java:260)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:238)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onComplete(FluxFilterFuseable.java:391)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onComplete(FluxDiscardOnCancel.java:104)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:128)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.FluxCreate$BaseSink.complete(FluxCreate.java:460)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:805)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.complete(FluxCreate.java:753)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drainLoop(FluxCreate.java:247)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drain(FluxCreate.java:213)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.complete(FluxCreate.java:204)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.complete(ReactorNettyClient.java:671)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:937)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
{"eventTime": "2023-02-03 10:55:06,833", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$depositWithDeclarativeTransactionFailure$10:159", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > amount of money is less than 100"}
org.springframework.dao.DataIntegrityViolationException: executeMany; SQL [INSERT INTO money_deposit_event (account_number, amount) VALUES ($1, $2)]; new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at org.springframework.r2dbc.connection.ConnectionFactoryUtils.convertR2dbcException(ConnectionFactoryUtils.java:237)
	at org.springframework.r2dbc.core.DefaultDatabaseClient.lambda$inConnectionMany$8(DefaultDatabaseClient.java:150)
	at reactor.core.publisher.Flux.lambda$onErrorMap$28(Flux.java:7123)
	at reactor.core.publisher.Flux.lambda$onErrorResume$29(Flux.java:7176)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)
	at reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onError(FluxUsingWhen.java:364)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onError(FluxHandle.java:212)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onError(MonoFlatMapMany.java:255)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:200)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onNext(FluxDiscardOnCancel.java:91)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:113)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:814)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:739)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:161)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.emit(ReactorNettyClient.java:687)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:939)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:333)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:454)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.r2dbc.postgresql.ExceptionFactory$PostgresqlDataIntegrityViolationException: new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:102)
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:65)
	at io.r2dbc.postgresql.ExceptionFactory.handleErrorResponse(ExceptionFactory.java:132)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:178)
	... 43 common frames omitted
{"eventTime": "2023-02-03 10:57:12,392", "level": "INFO", "serviceName": "application", "className": "org.springframework.test.context.support.AnnotationConfigContextLoaderUtils", "methodName": "detectDefaultConfigurationClasses:83", "message": "Could not detect default configuration classes for test class [home.example.r2dbctransaction.R2dbcTransactionApplicationTests]: R2dbcTransactionApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration."}
{"eventTime": "2023-02-03 10:57:12,534", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.test.context.SpringBootTestContextBootstrapper", "methodName": "getOrFindConfigurationClasses:247", "message": "Found @SpringBootConfiguration home.example.r2dbctransaction.R2dbcTransactionApplication for test class home.example.r2dbctransaction.R2dbcTransactionApplicationTests"}
{"eventTime": "2023-02-03 10:57:12,963", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarting:51", "message": "Starting R2dbcTransactionApplicationTests using Java 17.0.5 with PID 18909 (started by solmaz in /home/solmaz/IdeaProjects/r2dbc-transaction)"}
{"eventTime": "2023-02-03 10:57:12,964", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.SpringApplication", "methodName": "logStartupProfileInfo:630", "message": "No active profile set, falling back to 1 default profile: "default""}
{"eventTime": "2023-02-03 10:57:13,352", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:138", "message": "Bootstrapping Spring Data R2DBC repositories in DEFAULT mode."}
{"eventTime": "2023-02-03 10:57:13,481", "level": "INFO", "serviceName": "application", "className": "org.springframework.data.repository.config.RepositoryConfigurationDelegate", "methodName": "registerRepositoriesIn:208", "message": "Finished Spring Data repository scanning in 123 ms. Found 2 R2DBC repository interfaces."}
{"eventTime": "2023-02-03 10:57:14,389", "level": "INFO", "serviceName": "application", "className": "home.example.r2dbctransaction.configuration.FlywayConfiguration", "methodName": "instantiateFlyway:32", "message": "i~~~~~~~~~~~~~~~~~~~~~~~~~~ > FLYWAY LOCATIONS IS  {path:db/migrations}"}
{"eventTime": "2023-02-03 10:57:14,396", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Flyway Community Edition 9.5.1 by Redgate"}
{"eventTime": "2023-02-03 10:57:14,397", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "See what's new here: https://flywaydb.org/documentation/learnmore/releaseNotes#9.5.1"}
{"eventTime": "2023-02-03 10:57:14,397", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": ""}
{"eventTime": "2023-02-03 10:57:14,612", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Database: jdbc:postgresql://localhost:5432/BANK_DB (PostgreSQL 15.1)"}
{"eventTime": "2023-02-03 10:57:14,659", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Successfully validated 1 migration (execution time 00:00.031s)"}
{"eventTime": "2023-02-03 10:57:14,727", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Current version of schema "public": 1.0001"}
{"eventTime": "2023-02-03 10:57:14,728", "level": "INFO", "serviceName": "application", "className": "org.flywaydb.core.internal.logging.slf4j.Slf4jLog", "methodName": "info:37", "message": "Schema "public" is up to date. No migration necessary."}
{"eventTime": "2023-02-03 10:57:14,839", "level": "INFO", "serviceName": "application", "className": "org.springframework.boot.StartupInfoLogger", "methodName": "logStarted:57", "message": "Started R2dbcTransactionApplicationTests in 2.14 seconds (process running for 3.634)"}
{"eventTime": "2023-02-03 10:57:16,081", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailure$6:111", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > amount of money is less than 100"}
org.springframework.dao.DataIntegrityViolationException: executeMany; SQL [INSERT INTO money_deposit_event (account_number, amount) VALUES ($1, $2)]; new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at org.springframework.r2dbc.connection.ConnectionFactoryUtils.convertR2dbcException(ConnectionFactoryUtils.java:237)
	at org.springframework.r2dbc.core.DefaultDatabaseClient.lambda$inConnectionMany$8(DefaultDatabaseClient.java:150)
	at reactor.core.publisher.Flux.lambda$onErrorMap$28(Flux.java:7123)
	at reactor.core.publisher.Flux.lambda$onErrorResume$29(Flux.java:7176)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)
	at reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onError(FluxUsingWhen.java:364)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onError(FluxHandle.java:212)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onError(MonoFlatMapMany.java:255)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:200)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onNext(FluxDiscardOnCancel.java:91)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:113)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:814)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:739)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:161)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.emit(ReactorNettyClient.java:687)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:939)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:333)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:454)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.r2dbc.postgresql.ExceptionFactory$PostgresqlDataIntegrityViolationException: new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:102)
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:65)
	at io.r2dbc.postgresql.ExceptionFactory.handleErrorResponse(ExceptionFactory.java:132)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:178)
	... 43 common frames omitted
{"eventTime": "2023-02-03 10:57:16,149", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$depositWithDeclarativeTransactionFailureWhenThrowCustomException$12:182", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > remote service calling went with an custom exception"}
home.example.r2dbctransaction.exception.MyCustomException: null
	at home.example.r2dbctransaction.service.BankService.callRemoteService(BankService.java:111)
	at home.example.r2dbctransaction.service.BankService.lambda$depositWithDeclarativeTransactionWithCallingRemoteService$7(BankService.java:92)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:159)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2071)
	at reactor.core.publisher.MonoTakeLastOne$TakeLastOneSubscriber.onComplete(MonoTakeLastOne.java:162)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:392)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:894)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:997)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onComplete(MonoFlatMapMany.java:260)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:238)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onComplete(FluxFilterFuseable.java:391)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onComplete(FluxDiscardOnCancel.java:104)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:128)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.FluxCreate$BaseSink.complete(FluxCreate.java:460)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:805)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.complete(FluxCreate.java:753)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drainLoop(FluxCreate.java:247)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drain(FluxCreate.java:213)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.complete(FluxCreate.java:204)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.complete(ReactorNettyClient.java:671)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:937)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
{"eventTime": "2023-02-03 10:57:16,208", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$transactionFailureWhenThrowCustomException$3:81", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > remote service calling went with an custom exception"}
home.example.r2dbctransaction.exception.MyCustomException: null
	at home.example.r2dbctransaction.service.BankService.callRemoteService(BankService.java:111)
	at home.example.r2dbctransaction.service.BankService.lambda$depositWithRemoteServiceCall$3(BankService.java:67)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:159)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2071)
	at reactor.core.publisher.MonoTakeLastOne$TakeLastOneSubscriber.onComplete(MonoTakeLastOne.java:162)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:392)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:527)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:384)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:846)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:894)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:997)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onComplete(MonoFlatMapMany.java:260)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onComplete(FluxHandleFuseable.java:238)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onComplete(FluxFilterFuseable.java:391)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onComplete(FluxDiscardOnCancel.java:104)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onComplete(FluxDoFinally.java:128)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:222)
	at reactor.core.publisher.FluxCreate$BaseSink.complete(FluxCreate.java:460)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:805)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.complete(FluxCreate.java:753)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drainLoop(FluxCreate.java:247)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.drain(FluxCreate.java:213)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.complete(FluxCreate.java:204)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.complete(ReactorNettyClient.java:671)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:937)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
{"eventTime": "2023-02-03 10:57:16,352", "level": "ERROR", "serviceName": "application", "className": "home.example.r2dbctransaction.R2dbcTransactionApplicationTests", "methodName": "lambda$depositWithDeclarativeTransactionFailure$10:159", "message": "e~~~~~~~~~~~~~~~~~~~~~~~~~~ > amount of money is less than 100"}
org.springframework.dao.DataIntegrityViolationException: executeMany; SQL [INSERT INTO money_deposit_event (account_number, amount) VALUES ($1, $2)]; new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at org.springframework.r2dbc.connection.ConnectionFactoryUtils.convertR2dbcException(ConnectionFactoryUtils.java:237)
	at org.springframework.r2dbc.core.DefaultDatabaseClient.lambda$inConnectionMany$8(DefaultDatabaseClient.java:150)
	at reactor.core.publisher.Flux.lambda$onErrorMap$28(Flux.java:7123)
	at reactor.core.publisher.Flux.lambda$onErrorResume$29(Flux.java:7176)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)
	at reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onComplete(FluxFilter.java:300)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2547)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.request(FluxFilter.java:321)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onSubscribe(FluxFilter.java:219)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:64)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4444)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onError(FluxUsingWhen.java:364)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863)
	at reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onError(FluxHandle.java:212)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onError(MonoFlatMapMany.java:255)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:200)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at io.r2dbc.postgresql.util.FluxDiscardOnCancel$FluxDiscardOnCancelSubscriber.onNext(FluxDiscardOnCancel.java:91)
	at reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:113)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.drain(FluxCreate.java:814)
	at reactor.core.publisher.FluxCreate$BufferAsyncSink.next(FluxCreate.java:739)
	at reactor.core.publisher.FluxCreate$SerializedFluxSink.next(FluxCreate.java:161)
	at io.r2dbc.postgresql.client.ReactorNettyClient$Conversation.emit(ReactorNettyClient.java:687)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.emit(ReactorNettyClient.java:939)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:813)
	at io.r2dbc.postgresql.client.ReactorNettyClient$BackendMessageSubscriber.onNext(ReactorNettyClient.java:719)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:128)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onNext(FluxPeekFuseable.java:854)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:294)
	at reactor.netty.channel.FluxReceive.onInboundNext(FluxReceive.java:403)
	at reactor.netty.channel.ChannelOperations.onInboundNext(ChannelOperations.java:411)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:333)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:454)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.r2dbc.postgresql.ExceptionFactory$PostgresqlDataIntegrityViolationException: new row for relation "money_deposit_event" violates check constraint "money_deposit_event_amount_check"
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:102)
	at io.r2dbc.postgresql.ExceptionFactory.createException(ExceptionFactory.java:65)
	at io.r2dbc.postgresql.ExceptionFactory.handleErrorResponse(ExceptionFactory.java:132)
	at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:178)
	... 43 common frames omitted
